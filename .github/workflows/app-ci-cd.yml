name: KeyVault App CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'KeyVaultTerraform/**'
      - 'terraform/**'
      - 'Helm/**'
      - 'Dockerfile'
      - '.github/workflows/app-ci-cd.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'KeyVaultTerraform/**'
      - 'terraform/**'
      - 'Helm/**'
      - 'Dockerfile'
      - '.github/workflows/app-ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      imageTag:
        description: 'Docker image tag'
        required: true
        default: '1.0.0'

env:
  DOTNET_VERSION: '8.0.x'
  SERVICE_NAME: 'keyvaultterraformapp'
  IMAGE_TAG: ${{ github.event.inputs.imageTag || github.run_number }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Test
        run: dotnet test --configuration Release --no-build --verbosity normal

  build-and-push-image:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR details
        id: acr-details
        run: |
          ACR_NAME=$(az acr list --query "[?contains(name, 'shared')].name" -o tsv)
          ACR_LOGIN_SERVER=$(az acr list --query "[?contains(name, 'shared')].loginServer" -o tsv)
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_OUTPUT
          echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.acr-details.outputs.ACR_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.acr-details.outputs.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}
          build-args: |
            VERSION=${{ env.IMAGE_TAG }}

      - name: Set image info
        run: |
          echo "IMAGE_NAME=${{ steps.acr-details.outputs.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV

  terraform-deploy:
    name: Deploy with Terraform
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'dev' }}
    defaults:
      run:
        working-directory: ./terraform
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Terraform state storage details
        id: tf-state
        run: |
          RESOURCE_GROUP=$(az group list --query "[?contains(name, 'shared-infrastructure')].name" -o tsv)
          STORAGE_ACCOUNT=$(az storage account list --resource-group $RESOURCE_GROUP --query "[?contains(name, 'tfstate')].name" -o tsv)
          CONTAINER_NAME="tfstate"
          STORAGE_KEY=$(az storage account keys list --resource-group $RESOURCE_GROUP --account-name $STORAGE_ACCOUNT --query "[0].value" -o tsv)
          
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "STORAGE_ACCOUNT=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=$CONTAINER_NAME" >> $GITHUB_OUTPUT
          echo "STORAGE_KEY=$STORAGE_KEY" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="resource_group_name=${{ steps.tf-state.outputs.RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ steps.tf-state.outputs.STORAGE_ACCOUNT }}" \
            -backend-config="container_name=${{ steps.tf-state.outputs.CONTAINER_NAME }}" \
            -backend-config="key=keyvault-service-${{ github.event.inputs.environment || 'dev' }}.tfstate" \
            -backend-config="access_key=${{ steps.tf-state.outputs.STORAGE_KEY }}"

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="shared_resource_group_name=${{ steps.tf-state.outputs.RESOURCE_GROUP }}" \
            -var="shared_storage_account_name=${{ steps.tf-state.outputs.STORAGE_ACCOUNT }}" \
            -var="shared_container_name=${{ steps.tf-state.outputs.CONTAINER_NAME }}" \
            -var="image_tag=${{ env.IMAGE_TAG }}" \
            -var="image_repository=${{ env.SERVICE_NAME }}" \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Get AKS credentials
        run: |
          AKS_NAME=$(terraform output -raw aks_name || echo "")
          RESOURCE_GROUP=$(terraform output -raw resource_group_name || echo "${{ steps.tf-state.outputs.RESOURCE_GROUP }}")
          
          if [ -n "$AKS_NAME" ]; then
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
          else
            echo "AKS name not found in outputs, using cluster from infrastructure repo"
            AKS_NAME=$(az aks list --resource-group $RESOURCE_GROUP --query "[0].name" -o tsv)
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
          fi
          
          echo "AKS_NAME=$AKS_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP=$RESOURCE_GROUP" >> $GITHUB_ENV

      - name: Verify deployment
        run: |
          kubectl get pods -n keyvaultapp
          EXTERNAL_IP=$(kubectl get service -n keyvaultapp -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}')
          echo "EXTERNAL_IP=$EXTERNAL_IP" >> $GITHUB_ENV
          
      - name: Create Deployment Summary
        run: |
          echo "### Application Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Environment: ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Image: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ AKS Cluster: ${{ env.AKS_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Resource Group: ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Application URL: http://${{ env.EXTERNAL_IP }}:5002/KeyVault" >> $GITHUB_STEP_SUMMARY 